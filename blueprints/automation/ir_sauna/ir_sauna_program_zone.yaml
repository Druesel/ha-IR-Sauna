blueprint:
  name: IR Sauna – Programm Zone
  description: >
    Steuert zwei IR-Strahler (Liege+Oben) mit Programmen: Aus, Gleichmässig, Intervall (Gleichlauf Welle), Einmal Auf und Ab (Alias).
    Dauer (min) sowie Min-/Max-Intensität (%) kommen aus Helpers. Transition 1s.
  domain: automation
  input:
    select_program:
      name: Programmauswahl (input_select)
      selector:
        entity:
          domain: input_select
    duration_minutes_entity:
      name: Dauer in Minuten (input_number 5–30)
      selector:
        entity:
          domain: input_number
    # Max-Helligkeit des Programms
    max_intensity_pct_entity:
      name: Max-Intensität % (input_number, Default 100)
      selector:
        entity:
          domain: input_number
    # Min-Helligkeit des Programms
    min_intensity_pct_entity:
      name: Min-Intensität % (input_number, Default 5)
      selector:
        entity:
          domain: input_number
    # NEU: Zyklusdauer (nur für "Intervall", nicht für "Einmal AUF und AB")
    cycle_minutes_entity:
      name: Intervall – Zyklusdauer in Minuten (input_number)
      selector:
        entity:
          domain: input_number
    # Anzeige der Restlaufzeit im Dashboard
    timer_entity:
      name: Timer für Restlaufzeit (timer)
      selector:
        entity:
          domain: timer
    strahler_liege:
      name: Strahler - Liege
      selector:
        entity:
          domain: light
    strahler_oben:
      name: Strahler - Oben
      selector:
        entity:
          domain: light

mode: restart
max_exceeded: silent

variables:
  v_select: !input select_program
  v_strahler_liege: !input strahler_liege
  v_strahler_oben: !input strahler_oben
  v_duration_entity: !input duration_minutes_entity
  v_max_entity: !input max_intensity_pct_entity
  v_min_entity: !input min_intensity_pct_entity
  v_cycle_entity: !input cycle_minutes_entity
  v_timer: !input timer_entity

  # Fixwerte wie gewünscht
  step_pct: 5         # Schrittweite = 5%

triggers:
  - trigger: state
    entity_id: !input select_program
  # Timer-Ende fängt die Automation ab und schaltet AUS
  - trigger: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer_entity
  - trigger: event
    event_type: timer.cancelled
    event_data:
      entity_id: !input timer_entity

actions:
  # NEU: Wenn durch timer.finished ausgelöst -> sofort AUS und beenden
  - choose:
      - conditions: >-
          {{ trigger is defined
            and trigger.platform == 'event'
            and trigger.event.event_type in ['timer.finished','timer.cancelled'] }}
        sequence:
          # Schaltet beide Strahler aus
          - action: light.turn_off
            target:
              entity_id:
                - !input strahler_liege
                - !input strahler_oben
            data:
              transition: 1
          # Setzt die Programmauswahl zurück auf AUS
          - action: input_select.select_option
            target:
              entity_id: !input select_program
            data:
              option: 'AUS'
          # Beendet die Automation
          - stop: "Timer finished -> AUS"

  # --- Laufzeit-Variablen berechnen ---
  - variables:
      program: "{{ states(v_select) }}"
      duration: "{{ states(v_duration_entity) | int(20) }}"                # Gesamtprogrammdauer (min)
      end_ts: "{{ now().timestamp() + (duration | int(20)) * 60 }}"

  # --- Timer steuern (für Restlaufzeit im Dashboard) ---
  - choose:
      - conditions: "{{ program == 'AUS' }}"
        sequence:
          # Timer stoppen, wenn kein Programm läuft
          - action: timer.cancel
            target: { entity_id: !input timer_entity }
    default:
      # Timer mit neuer Programmdauer starten
      - action: timer.start
        target: { entity_id: !input timer_entity }
        data:
          duration: "{{ '%02d:%02d:%02d' | format(0, duration|int, 0) }}"

  - choose:
      # --- AUS ---------------------------------------------------------------
      - conditions:
          - condition: template
            value_template: "{{ program == 'AUS' }}"
        sequence:
          # Sicherheitshalber beide Strahler ausschalten
          - action: light.turn_off
            target:
              entity_id:
                - !input strahler_liege
                - !input strahler_oben
            data:
              transition: 1

      # --- GLEICHMÄSSIG ------------------------------------------------------
      - conditions:
          - condition: template
            value_template: "{{ program == 'Gleichmässig' }}"
        sequence:
          # Strahler mit maximaler Intensität einschalten
          - action: light.turn_on
            target:
              entity_id:
                - !input strahler_liege
                - !input strahler_oben
            data:
              brightness_pct: "{{ states(v_max_entity) | int(100) }}"
              transition: 1
          # Gewählte Dauer warten
          - delay:
              minutes: "{{ duration }}"
          # Strahler ausschalten
          - action: light.turn_off
            target:
              entity_id:
                - !input strahler_liege
                - !input strahler_oben
            data:
              transition: 1
          # Timer manuell beenden
          - action: timer.finish
            target: { entity_id: !input timer_entity }
          # Programmauswahl zurücksetzen
          - action: input_select.select_option
            target: { entity_id: !input select_program }
            data: { option: 'AUS' }

      # --- INTERVALL = WELLE (gleichlaufend; Schrittzeit aus Zyklusdauer) ---
      - conditions:
          - condition: template
            value_template: "{{ program == 'Intervall' }}"
        sequence:
          # Starthelligkeit und Richtung definieren
          - variables:
              b: "{{ states(v_min_entity) | int(5) }}"
              direction: 'up'
          # Solange Programm aktiv und Zeit nicht abgelaufen
          - repeat:
              while:
                - condition: template >-
                    {{ is_state(v_select,'Intervall') and now().timestamp() < end_ts }}
              sequence:
                # Laufende Werte und Schrittzeit berechnen
                - variables:
                    min_pct: "{{ states(v_min_entity) | int(5) }}"
                    max_pct: "{{ states(v_max_entity) | int(100) }}"
                    cycle_min: "{{ states(v_cycle_entity) | int(5) }}"
                    steps_total: "{{ ((max_pct - min_pct) // step_pct + 1) * 2 }}"
                    sec_intervall: "{{ ((cycle_min * 60 / steps_total) | round(0, 'ceil') | int) }}"
                    b: "{{ [[b, max_pct] | min, min_pct] | max }}"
                # Strahler mit aktueller Helligkeit einschalten
                - action: light.turn_on
                  target:
                    entity_id:
                      - !input strahler_liege
                      - !input strahler_oben
                  data:
                    brightness_pct: "{{ b }}"
                    transition: 1
                # Schrittzeit abwarten
                - delay: { seconds: "{{ sec_intervall }}" }
                # Helligkeit je nach Richtung anpassen
                - choose:
                    - conditions: "{{ direction == 'up' }}"
                      sequence:
                        # Helligkeit erhöhen
                        - variables:
                            b: "{{ [b + step_pct, max_pct] | min }}"
                        - choose:
                            - conditions: "{{ b >= max_pct }}"
                              sequence:
                                # Oberes Limit erreicht -> Richtung wechseln
                                - variables: { direction: 'down' }
                    - conditions: "{{ direction == 'down' }}"
                      sequence:
                        # Helligkeit verringern
                        - variables:
                            b: "{{ [b - step_pct, min_pct] | max }}"
                        - choose:
                            - conditions: "{{ b <= min_pct }}"
                              sequence:
                                # Unteres Limit erreicht -> Richtung wechseln
                                - variables: { direction: 'up' }
          # Programmende: Strahler ausschalten
          - action: light.turn_off
            target:
              entity_id:
                - !input strahler_liege
                - !input strahler_oben
            data:
              transition: 1
          # Timer beenden
          - action: timer.finish
            target: { entity_id: !input timer_entity }
          # Programmauswahl zurücksetzen
          - action: input_select.select_option
            target: { entity_id: !input select_program }
            data: { option: 'AUS' }

      # --- Einmal AUF und AB (ein Zyklus in gesamter Dauer) ------------------
      - conditions:
          - condition: template
            value_template: "{{ program == 'Einmal AUF und AB' }}"
        sequence:
          # Starthelligkeit und Richtung setzen
          - variables:
              b: "{{ states(v_min_entity) | int(5) }}"
              direction: 'up'
          # Ein Durchlauf von min zu max und zurück
          - repeat:
              while:
                - condition: template >-
                    {{ is_state(v_select,'Einmal AUF und AB')
                       and now().timestamp() < end_ts
                       and repeat.index <= ((states(v_max_entity)|int(100) - states(v_min_entity)|int(5)) // step_pct + 1) * 2 }}
              sequence:
                # Laufende Werte und Schrittzeit berechnen
                - variables:
                    min_pct: "{{ states(v_min_entity) | int(5) }}"
                    max_pct: "{{ states(v_max_entity) | int(100) }}"
                    steps_total: "{{ ((max_pct - min_pct) // step_pct + 1) * 2 }}"
                    sec_once: "{{ ((duration * 60 / steps_total) | round(0, 'ceil') | int) }}"
                    b: "{{ [[b, max_pct] | min, min_pct] | max }}"
                # Strahler auf aktuelle Helligkeit setzen
                - action: light.turn_on
                  target:
                    entity_id:
                      - !input strahler_liege
                      - !input strahler_oben
                  data:
                    brightness_pct: "{{ b }}"
                    transition: 1
                # Schrittzeit abwarten
                - delay: { seconds: "{{ sec_once }}" }
                # Helligkeit je nach Richtung anpassen
                - choose:
                    - conditions: "{{ direction == 'up' }}"
                      sequence:
                        # Helligkeit erhöhen
                        - variables:
                            b: "{{ [b + step_pct, max_pct] | min }}"
                        - choose:
                            - conditions: "{{ b >= max_pct }}"
                              sequence:
                                # Obere Grenze erreicht -> Richtung wechseln
                                - variables: { direction: 'down' }
                    - conditions: "{{ direction == 'down' }}"
                      sequence:
                        # Helligkeit verringern
                        - variables:
                            b: "{{ [b - step_pct, min_pct] | max }}"
                        - choose:
                            - conditions: "{{ b <= min_pct }}"
                              sequence:
                                # Untere Grenze erreicht -> Richtung wechseln
                                - variables: { direction: 'up' }
          # Programmende: Strahler ausschalten
          - action: light.turn_off
            target:
              entity_id:
                - !input strahler_liege
                - !input strahler_oben
            data:
              transition: 1
          # Timer beenden
          - action: timer.finish
            target: { entity_id: !input timer_entity }
          # Programmauswahl zurücksetzen
          - action: input_select.select_option
            target: { entity_id: !input select_program }
            data: { option: 'AUS' }
